{"ast":null,"code":"var _jsxFileName = \"/Users/metanorm/Documents/reactdev/alieninternet/src/TopPostsPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopPostsPage = () => {\n  _s();\n  const [topPosts, setTopPosts] = useState([]);\n  useEffect(() => {\n    // In a real application, this would be an API call\n    fetchTopPosts().then(setTopPosts);\n  }, []);\n\n  // This is a mock function. In a real app, you'd call your backend API\n  const fetchTopPosts = async () => {\n    // Simulating an API call\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve([{\n          id: '1',\n          title: 'Amazing New Technology',\n          url: 'https://example.com/tech',\n          categoryId: 'tech',\n          votes: 120,\n          timestamp: Date.now()\n        }, {\n          id: '2',\n          title: 'Cute Cats Video',\n          url: 'https://example.com/cats',\n          categoryId: 'entertainment',\n          votes: 95,\n          timestamp: Date.now()\n        }\n        // Add more mock posts here\n        ]);\n      }, 500);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"top-posts\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top Posts of the Day\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: topPosts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: post.url,\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"votes\",\n          children: [post.votes, \" votes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 4\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 2\n  }, this);\n};\n_s(TopPostsPage, \"ZEO45hMyamrW2whruZ+y4fq9fwg=\");\n_c = TopPostsPage;\nexport default TopPostsPage;\nvar _c;\n$RefreshReg$(_c, \"TopPostsPage\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","TopPostsPage","_s","topPosts","setTopPosts","fetchTopPosts","then","Promise","resolve","setTimeout","id","title","url","categoryId","votes","timestamp","Date","now","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","to","_c","$RefreshReg$"],"sources":["/Users/metanorm/Documents/reactdev/alieninternet/src/TopPostsPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface Post {\n  id: string;\n  title: string;\n  url: string;\n  categoryId: string;\n  votes: number;\n  timestamp: number;\n}\n\nconst TopPostsPage: React.FC = () => {\n  const [topPosts, setTopPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n\t// In a real application, this would be an API call\n\tfetchTopPosts().then(setTopPosts);\n  }, []);\n\n  // This is a mock function. In a real app, you'd call your backend API\n  const fetchTopPosts = async (): Promise<Post[]> => {\n\t// Simulating an API call\n\treturn new Promise((resolve) => {\n\t  setTimeout(() => {\n\t\tresolve([\n\t\t  { id: '1', title: 'Amazing New Technology', url: 'https://example.com/tech', categoryId: 'tech', votes: 120, timestamp: Date.now() },\n\t\t  { id: '2', title: 'Cute Cats Video', url: 'https://example.com/cats', categoryId: 'entertainment', votes: 95, timestamp: Date.now() },\n\t\t  // Add more mock posts here\n\t\t]);\n\t  }, 500);\n\t});\n  };\n\n  return (\n\t<div className=\"top-posts\">\n\t  <h2>Top Posts of the Day</h2>\n\t  <ul>\n\t\t{topPosts.map((post) => (\n\t\t  <li key={post.id}>\n\t\t\t<Link to={post.url}>{post.title}</Link>\n\t\t\t<span className=\"votes\">{post.votes} votes</span>\n\t\t  </li>\n\t\t))}\n\t  </ul>\n\t</div>\n  );\n};\n\nexport default TopPostsPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWxC,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAS,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACjB;IACAQ,aAAa,CAAC,CAAC,CAACC,IAAI,CAACF,WAAW,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAA6B;IACpD;IACA,OAAO,IAAIE,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QAClBD,OAAO,CAAC,CACN;UAAEE,EAAE,EAAE,GAAG;UAAEC,KAAK,EAAE,wBAAwB;UAAEC,GAAG,EAAE,0BAA0B;UAAEC,UAAU,EAAE,MAAM;UAAEC,KAAK,EAAE,GAAG;UAAEC,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;QAAE,CAAC,EACpI;UAAEP,EAAE,EAAE,GAAG;UAAEC,KAAK,EAAE,iBAAiB;UAAEC,GAAG,EAAE,0BAA0B;UAAEC,UAAU,EAAE,eAAe;UAAEC,KAAK,EAAE,EAAE;UAAEC,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;QAAE;QACpI;QAAA,CACD,CAAC;MACD,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACD,CAAC;EAED,oBACDjB,OAAA;IAAKkB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBnB,OAAA;MAAAmB,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BvB,OAAA;MAAAmB,QAAA,EACAhB,QAAQ,CAACqB,GAAG,CAAEC,IAAI,iBACjBzB,OAAA;QAAAmB,QAAA,gBACDnB,OAAA,CAACF,IAAI;UAAC4B,EAAE,EAAED,IAAI,CAACb,GAAI;UAAAO,QAAA,EAAEM,IAAI,CAACd;QAAK;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACvCvB,OAAA;UAAMkB,SAAS,EAAC,OAAO;UAAAC,QAAA,GAAEM,IAAI,CAACX,KAAK,EAAC,QAAM;QAAA;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA,GAFvCE,IAAI,CAACf,EAAE;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEP,CAAC;AAACrB,EAAA,CAnCID,YAAsB;AAAA0B,EAAA,GAAtB1B,YAAsB;AAqC5B,eAAeA,YAAY;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}