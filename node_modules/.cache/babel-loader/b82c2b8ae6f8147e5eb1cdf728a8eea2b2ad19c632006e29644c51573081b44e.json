{"ast":null,"code":"var _jsxFileName = \"/Users/metanorm/Documents/reactdev/alieninternet/src/CategoryPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getCategoryById } from './data/categories';\nimport PostList from './PostList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CategoryPage = ({\n  category,\n  onNavigate\n}) => {\n  _s();\n  const [currentCategory, setCurrentCategory] = useState(null);\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const fetchedCategory = getCategoryById(category);\n    setCurrentCategory(fetchedCategory || null);\n    if (fetchedCategory && !fetchedCategory.subcategories) {\n      // This is a leaf category, fetch posts\n      fetchPosts(category).then(setPosts);\n    } else {\n      setPosts([]);\n    }\n  }, [category]);\n\n  // Mock function to fetch posts - replace with actual API call in a real app\n  const fetchPosts = async categoryId => {\n    // Simulating an API call\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve([{\n          id: '1',\n          title: 'First post in this category',\n          url: 'https://example.com/post1',\n          votes: 10\n        }, {\n          id: '2',\n          title: 'Another interesting post',\n          url: 'https://example.com/post2',\n          votes: 8\n        }\n        // Add more mock posts here\n        ]);\n      }, 300);\n    });\n  };\n  if (!currentCategory) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Category not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"category-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: currentCategory.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this), currentCategory.subcategories ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"subcategories\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentCategory.subcategories.map(subCategory => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => onNavigate(subCategory.id),\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: `/category/${subCategory.id}`,\n            children: subCategory.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"count\",\n            children: [\"(\", subCategory.count, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 5\n          }, this), subCategory.isNew && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/new.gif\",\n            alt: \"New\",\n            className: \"new\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 27\n          }, this)]\n        }, subCategory.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 6\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 3\n    }, this) : /*#__PURE__*/_jsxDEV(PostList, {\n      posts: posts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 2\n  }, this);\n};\n_s(CategoryPage, \"i9vtMFqR3dHzOY8nuzjWNt7WEHc=\");\n_c = CategoryPage;\nexport default CategoryPage;\nvar _c;\n$RefreshReg$(_c, \"CategoryPage\");","map":{"version":3,"names":["React","useState","useEffect","Link","getCategoryById","PostList","jsxDEV","_jsxDEV","CategoryPage","category","onNavigate","_s","currentCategory","setCurrentCategory","posts","setPosts","fetchedCategory","subcategories","fetchPosts","then","categoryId","Promise","resolve","setTimeout","id","title","url","votes","children","fileName","_jsxFileName","lineNumber","columnNumber","className","name","map","subCategory","onClick","to","count","isNew","src","alt","_c","$RefreshReg$"],"sources":["/Users/metanorm/Documents/reactdev/alieninternet/src/CategoryPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getCategoryById, Category } from './data/categories';\nimport PostList from './PostList';\n\ninterface CategoryPageProps {\n  category: string;\n  onNavigate: (categoryId: string) => void;\n}\n\ninterface Post {\n  id: string;\n  title: string;\n  url: string;\n  votes: number;\n}\n\nconst CategoryPage: React.FC<CategoryPageProps> = ({ category, onNavigate }) => {\n  const [currentCategory, setCurrentCategory] = useState<Category | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n\tconst fetchedCategory = getCategoryById(category);\n\tsetCurrentCategory(fetchedCategory || null);\n\n\tif (fetchedCategory && !fetchedCategory.subcategories) {\n\t  // This is a leaf category, fetch posts\n\t  fetchPosts(category).then(setPosts);\n\t} else {\n\t  setPosts([]);\n\t}\n  }, [category]);\n\n  // Mock function to fetch posts - replace with actual API call in a real app\n  const fetchPosts = async (categoryId: string): Promise<Post[]> => {\n\t// Simulating an API call\n\treturn new Promise((resolve) => {\n\t  setTimeout(() => {\n\t\tresolve([\n\t\t  { id: '1', title: 'First post in this category', url: 'https://example.com/post1', votes: 10 },\n\t\t  { id: '2', title: 'Another interesting post', url: 'https://example.com/post2', votes: 8 },\n\t\t  // Add more mock posts here\n\t\t]);\n\t  }, 300);\n\t});\n  };\n\n  if (!currentCategory) {\n\treturn <div>Category not found</div>;\n  }\n\n  return (\n\t<div className=\"category-page\">\n\t  <h2>{currentCategory.name}</h2>\n\t  {currentCategory.subcategories ? (\n\t\t<div className=\"subcategories\">\n\t\t  <ul>\n\t\t\t{currentCategory.subcategories.map((subCategory: Category) => (\n\t\t\t  <li key={subCategory.id} onClick={() => onNavigate(subCategory.id)}>\n\t\t\t\t<Link to={`/category/${subCategory.id}`}>{subCategory.name}</Link>\n\t\t\t\t<span className=\"count\">({subCategory.count})</span>\n\t\t\t\t{subCategory.isNew && <img src=\"/new.gif\" alt=\"New\" className=\"new\" />}\n\t\t\t  </li>\n\t\t\t))}\n\t\t  </ul>\n\t\t</div>\n\t  ) : (\n\t\t<PostList posts={posts} />\n\t  )}\n\t</div>\n  );\n};\n\nexport default CategoryPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}